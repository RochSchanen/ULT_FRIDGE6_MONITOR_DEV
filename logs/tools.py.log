
###########
# verbose #
###########

 . Operating system is Windows
 . Running Python version 3.13.1
 . File header is:
   # file: tools.py
   # content: debug and logging tools
   # created: 2025 April 17
   # modified: 2025 April 22
   # author: Roch Schanen
   # repository: https://github.com/RochSchanen/ULT_FRIDGE6_MONITOR_DEV
 . file history is:
    . version 0.00:

    Add 'debug_class' and 'log_class':
    
        . 'debug_class.__init__(*flags)' sets the flags during
        instantiation (by passing the names of the flags as
        strings). There is two reserved flags: 1) The flag 'NONE'
        which clears all flags and has precedence over all the
        other flags. 2) The flag 'ALL' which sets all flags (all
        flags are selected except the flag 'NONE').

        . 'debug_class.flag(*flags)' tests if any of the flags
        parameters (passed as strings) is set.

        . 'log_class.__init__(filepath = "")' defines the log
        file for logging messages during instantiation. If the
        'filepath' parameter is left empty (default value), no
        file is created, and the 'log_class.print()' method
        writes only to the standard output. If 'filepath' is
        defined, the 'log_class.print()' method write both to
        the standard output and to the log file.

        . use 'log_class.print(*args, **kwargs)' exactly as you
        would use the standard 'print(*args, **kwargs)' function.

        . use 'log_class.boxprint(s)' to print a string 's' that
        is surrounded by a decorating box to emphasize the text.
        The style of the box depends on the operating system.
        The reason is that some python versions cannot display
        some Unicode characters.

        . Some additional methods are useful to display some
        complementary information when running the python code:

        . use 'log_class.file_header()' to log the header of the
        main script. The header correspond to all the line at the
        beginning of the file that start with the hash sign.

        . use 'log_class.os_version()' to log the current version
        of operating system.
        
        . use 'log_class.python_version()' to log the current
        python version used to run the code.
        
        . use 'log_class.history()' to log the file history.
        This text is part of the file history.
    
    . version 0.01:

    Add 'path_class':
    
        . 'path_class.__init__() initialises the path_class with
        two default paths: the absolute path to the script and to
        the subfolder /resources.

        . 'path_class.find(path)' checks first if the relative path
        given as a parameter to a given file exists. If not, it will
        search for that file through the other paths registered.

        . use 'path_class.paths.append("new_path_string")' to register
        more paths.
    
 . Last file version is '0.01'

#########
# tests #
#########

 . running test for version 0.01
 find path of file "bkgd.png":
L:\fridge_6\2. SOFTWARE\python\ULT_FRIDGE6_MONITOR_DEV/resources/bkgd.png
 . end test for version 0.00
